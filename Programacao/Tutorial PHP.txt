Tutorial PHP
========================
LFI:
Fazer leitura de  um arquivo em PHP (leitura co cÃ³digo fonte) por meio de uma vulenrabilidade de LFI

Wrapper PHP
php://filter.convert.base64-encode/resouce=

## read file with php line by line

## running php code in command line

php -r "echo 'Teste';"

php interactive shell

php -a
_________________________________________________________________________
## receiving arguments by line command:

$argv[0] -> script name
$argv[1] -> first argumment
_______________________________________________________________________
arrays in php:

Associative

$array_example = array( "Teste" => "Teste", "Zumba"=>"Second Element");
or Numeric arrays

$array_example2 = array( "First element", "Second");
_______________________________________________________________________
## openning a process
	$proc_attributes = array(0 => array("pipe", "r"), //pipe stdin
                                        1 => array("pipe", "w"), //pipe stdout
                                        2 => array("file", "./error_output.txt", "a") // stderr
	);
	$res = proc_open('python /path/to/python/script', $proc_attributes, $pipes);

	if (is_resource($res)) {
        //...do what you want with $pipes[0] => stdin
        //$pipes[1] => stdout

        fwrite($pipes[0], 'Teste');
        fclose($pipes[0]);
	}

## Executing os commands with php

	exec( string $command [, array &$output [, int &$return_var ]] ) : string passthru (string $command [, int &$return_var]) : void

## queries with php:

	$query = "SELECT column_name FROM table_name WHERE column_name1 = 'value';
	$db_resp = mysqli_query($dbconnection, $query);
	if ($db_resp->num_rows == 0) {
	 //any results found
	} else {
	
	//if the result is more than one row, we have to handle the response as:
	
     while($row = mysqli_fetch_array($db_resp, MYSQLI_NUM) {
    // row[0] will contain data for each interation in this loop
    // we could set MYSQLI_ASSOC if we would. the difference is the array type that returns from mysqli_fetch array method
}

---------------------------------------------------------------------------------------------------------------------
## JSON

 json_encode is a method in php to "jsonify" an string...

-------------------------------------------------------------------------------------------------------------------
## try - catch in php:

	try {
	    //...some code here
	} catch (Exception $e) {
	    //... some exception code here
	}


-----------------------------------------------------------------------------------------------------------------------
## File upload with php:
1 - Create an html page that permits the user to inform and submit a file within POST request
<form action="page.php" enctype="multipart/form-data" method="post">
    <input type="file" name="upload">
</form>

2 - Verify if $_FILE variable is set (isset())
3 - specify and check for cerrect file formats accepted by the application
    get file extension with "explode()" function in adction with "end()" function
    explode(",", $string);
    explode($delimiter, $string_to_explode);


	sizeof(array) => get the size of an array.

$_SERVER['SERVER_ADDR'];
$_SERVER['DOCUMENT_ROOT'];  
**OBS: Please, considering the file upload max size:**
There are four attributes that we have to change:

in the file: /etc/php/7.3/apache2/php.ini set:

upload_max_filesize=100M
post_max_size=100M
max_input_time=600
max_execution_time=600





---------------------------------------------------------------------------------------------------------------
## Handle an ajax request with PHP:

As normal form input,  we can receive with the variable $_POST, but in the request we have to set  Content-type: x-www-form-urlencoded.